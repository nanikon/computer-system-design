
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003670  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003844  08003844  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800384c  0800384c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000b8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d938  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b34  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025bd  00000000  00000000  00030c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de32  00000000  00000000  00033225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7831  00000000  00000000  00041057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118888  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003370  00000000  00000000  001188d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003804 	.word	0x08003804

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003804 	.word	0x08003804

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 80004f6:	b087      	sub	sp, #28
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fb9d 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83d 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f945 	bl	8000790 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000506:	f000 f899 	bl	800063c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800050a:	f000 f917 	bl	800073c <MX_USART6_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int buffer[BUFFER_SIZE] = {0};
 800050e:	f107 0318 	add.w	r3, r7, #24
 8000512:	3b04      	subs	r3, #4
 8000514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f96a 	bl	80037f4 <memset>
  int pointer = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT((TIM_HandleTypeDef *)&htim1);
 800052c:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x80>)
 800052e:	f001 fc0d 	bl	8001d4c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char s[] = "Hello world!\n";
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x84>)
 8000538:	f1a3 0414 	sub.w	r4, r3, #20
 800053c:	4613      	mov	r3, r2
 800053e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000540:	c407      	stmia	r4!, {r0, r1, r2}
 8000542:	8023      	strh	r3, [r4, #0]
	  while (1)
	  {
		  HAL_UART_Transmit_IT( &huart6, (uint8_t *) s, sizeof( s ));
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	3b14      	subs	r3, #20
 800054a:	220e      	movs	r2, #14
 800054c:	4619      	mov	r1, r3
 800054e:	480a      	ldr	r0, [pc, #40]	; (8000578 <main+0x88>)
 8000550:	f002 f9c7 	bl	80028e2 <HAL_UART_Transmit_IT>
		  HAL_UART_Receive_IT(&huart6, (uint8_t *) s, sizeof( s ));
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	3b14      	subs	r3, #20
 800055a:	220e      	movs	r2, #14
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <main+0x88>)
 8000560:	f002 fa04 	bl	800296c <HAL_UART_Receive_IT>
		  //HAL_UART_Transmit( &huart6, (uint8_t *) s, sizeof( s ), 10 );
	  HAL_Delay( 3000 );
 8000564:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000568:	f000 fbd8 	bl	8000d1c <HAL_Delay>
		  HAL_UART_Transmit_IT( &huart6, (uint8_t *) s, sizeof( s ));
 800056c:	e7ea      	b.n	8000544 <main+0x54>
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	0800381c 	.word	0x0800381c
 8000578:	20000074 	.word	0x20000074

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f003 f932 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <SystemClock_Config+0xb8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <SystemClock_Config+0xb8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SystemClock_Config+0xbc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <SystemClock_Config+0xbc>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <SystemClock_Config+0xbc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 ff53 	bl	800149c <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005fc:	f000 f9d4 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f9b6 	bl	800198c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000626:	f000 f9bf 	bl	80009a8 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b092      	sub	sp, #72	; 0x48
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
 800065c:	615a      	str	r2, [r3, #20]
 800065e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 f8c4 	bl	80037f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_TIM1_Init+0xf8>)
 800066e:	4a32      	ldr	r2, [pc, #200]	; (8000738 <MX_TIM1_Init+0xfc>)
 8000670:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000-1;
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <MX_TIM1_Init+0xf8>)
 8000674:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b2e      	ldr	r3, [pc, #184]	; (8000734 <MX_TIM1_Init+0xf8>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15-1;
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <MX_TIM1_Init+0xf8>)
 8000682:	220e      	movs	r2, #14
 8000684:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_TIM1_Init+0xf8>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_TIM1_Init+0xf8>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000692:	4b28      	ldr	r3, [pc, #160]	; (8000734 <MX_TIM1_Init+0xf8>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000698:	4826      	ldr	r0, [pc, #152]	; (8000734 <MX_TIM1_Init+0xf8>)
 800069a:	f001 fbc7 	bl	8001e2c <HAL_TIM_OC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006a4:	f000 f980 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a8:	2300      	movs	r3, #0
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006b4:	4619      	mov	r1, r3
 80006b6:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_TIM1_Init+0xf8>)
 80006b8:	f001 ffe4 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006c2:	f000 f971 	bl	80009a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	2208      	movs	r2, #8
 80006e8:	4619      	mov	r1, r3
 80006ea:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_TIM1_Init+0xf8>)
 80006ec:	f001 fcf6 	bl	80020dc <HAL_TIM_OC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80006f6:	f000 f957 	bl	80009a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4619      	mov	r1, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_TIM1_Init+0xf8>)
 800071e:	f002 f82d 	bl	800277c <HAL_TIMEx_ConfigBreakDeadTime>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000728:	f000 f93e 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	3748      	adds	r7, #72	; 0x48
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000002c 	.word	0x2000002c
 8000738:	40010000 	.word	0x40010000

0800073c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART6_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART6_UART_Init+0x4c>)
 8000774:	f002 f868 	bl	8002848 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f913 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000074 	.word	0x20000074
 800078c:	40011400 	.word	0x40011400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <MX_GPIO_Init+0xf0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_GPIO_Init+0xf0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_GPIO_Init+0xf0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_GPIO_Init+0xf0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LEDG_Pin|LEDY_Pin|LEDR_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_GPIO_Init+0xf4>)
 800083a:	f000 fdfb 	bl	8001434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUT_Pin */
  GPIO_InitStruct.Pin = BUT_Pin;
 800083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_GPIO_Init+0xf8>)
 8000854:	f000 fc2a 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDG_Pin LEDY_Pin LEDR_Pin */
  GPIO_InitStruct.Pin = LEDG_Pin|LEDY_Pin|LEDR_Pin;
 8000858:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0xf4>)
 8000872:	f000 fc1b 	bl	80010ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40020800 	.word	0x40020800

0800088c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <HAL_UART_RxCpltCallback+0x24>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d104      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0x1c>
  {
    // USART1 завершил прием данных
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800089e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <HAL_UART_RxCpltCallback+0x28>)
 80008a4:	f000 fddf 	bl	8001466 <HAL_GPIO_TogglePin>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40011400 	.word	0x40011400
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a05      	ldr	r2, [pc, #20]	; (80008dc <HAL_UART_TxCpltCallback+0x24>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d104      	bne.n	80008d4 <HAL_UART_TxCpltCallback+0x1c>
  {
    // USART2 завершил отправку данных
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80008ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <HAL_UART_TxCpltCallback+0x28>)
 80008d0:	f000 fdc9 	bl	8001466 <HAL_GPIO_TogglePin>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40011400 	.word	0x40011400
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a27      	ldr	r2, [pc, #156]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d147      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		int but = HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin);
 80008f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fa:	4826      	ldr	r0, [pc, #152]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008fc:	f000 fd82 	bl	8001404 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	60fb      	str	r3, [r7, #12]
		but = !but;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b00      	cmp	r3, #0
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	60fb      	str	r3, [r7, #12]

		if(is_reading == 1){
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d135      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
			if(but == 1 && noisy == 0){
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d107      	bne.n	8000930 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d103      	bne.n	8000930 <HAL_TIM_PeriodElapsedCallback+0x4c>
				noisy = 1;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e02a      	b.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
			} else if(but == 1 && noisy == 1) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10c      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d108      	bne.n	8000950 <HAL_TIM_PeriodElapsedCallback+0x6c>
				is_pressed = 1;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
				count_tick++;
 8000944:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3301      	adds	r3, #1
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e01a      	b.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
			} else if(noisy == 1 && but == 0){
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x82>
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x82>
				noisy = 0;
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	e00f      	b.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
			} else if(but == 0 && noisy == 0){
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10c      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
				is_pressed = 0;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
				count_tick++;
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000982:	6013      	str	r3, [r2, #0]
			}
		}
	}

}
 8000984:	e7ff      	b.n	8000986 <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010000 	.word	0x40010000
 8000994:	40020800 	.word	0x40020800
 8000998:	20000000 	.word	0x20000000
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	200000b8 	.word	0x200000b8
 80009a4:	200000bc 	.word	0x200000bc

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <HAL_MspInit+0x4c>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <HAL_TIM_OC_MspInit+0x94>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d134      	bne.n	8000a90 <HAL_TIM_OC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_TIM_OC_MspInit+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <HAL_TIM_OC_MspInit+0x9c>)
 8000a7c:	f000 fb16 	bl	80010ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2100      	movs	r1, #0
 8000a84:	2019      	movs	r0, #25
 8000a86:	f000 fa48 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a8a:	2019      	movs	r0, #25
 8000a8c:	f000 fa61 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x94>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d133      	bne.n	8000b2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_UART_MspInit+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000afe:	23c0      	movs	r3, #192	; 0xc0
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	; (8000b40 <HAL_UART_MspInit+0x9c>)
 8000b1a:	f000 fac7 	bl	80010ac <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2047      	movs	r0, #71	; 0x47
 8000b24:	f000 f9f9 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b28:	2047      	movs	r0, #71	; 0x47
 8000b2a:	f000 fa12 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40011400 	.word	0x40011400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020800 	.word	0x40020800

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8a4 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b9e:	f001 f994 	bl	8001eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000002c 	.word	0x2000002c

08000bac <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART6_IRQHandler+0x10>)
 8000bb2:	f001 ff0b 	bl	80029cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000074 	.word	0x20000074

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bea:	490e      	ldr	r1, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c00:	4c0b      	ldr	r4, [pc, #44]	; (8000c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ffd7 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fdcb 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fc6b 	bl	80004f0 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c28:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000c2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c30:	200000c8 	.word	0x200000c8

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f94f 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fea2 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f967 	bl	8000f6e <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f92f 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	20000008 	.word	0x20000008

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2000000c 	.word	0x2000000c
 8000d00:	200000c4 	.word	0x200000c4

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000c4 	.word	0x200000c4

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff feb6 	bl	8000d04 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d008      	beq.n	8000fb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e052      	b.n	800105e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0216 	bic.w	r2, r2, #22
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <HAL_DMA_Abort+0x62>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0208 	bic.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	e013      	b.n	8001032 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100a:	f7ff fe7b 	bl	8000d04 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d90c      	bls.n	8001032 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e015      	b.n	800105e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e4      	bne.n	800100a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	223f      	movs	r2, #63	; 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e177      	b.n	80013b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8166 	bne.w	80013b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80c0 	beq.w	80013b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b66      	ldr	r3, [pc, #408]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_GPIO_Init+0x324>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a61      	ldr	r2, [pc, #388]	; (80013d4 <HAL_GPIO_Init+0x328>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a58      	ldr	r2, [pc, #352]	; (80013d8 <HAL_GPIO_Init+0x32c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d037      	beq.n	80012ea <HAL_GPIO_Init+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_GPIO_Init+0x330>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_GPIO_Init+0x23a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a56      	ldr	r2, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x334>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x236>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <HAL_GPIO_Init+0x338>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x232>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x33c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x22e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a53      	ldr	r2, [pc, #332]	; (80013ec <HAL_GPIO_Init+0x340>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x22a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x344>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <HAL_GPIO_Init+0x348>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_GPIO_Init+0x34c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x350>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x21a>
 80012c2:	2309      	movs	r3, #9
 80012c4:	e012      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012c6:	230a      	movs	r3, #10
 80012c8:	e010      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e00e      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00c      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e00a      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e008      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012da:	2304      	movs	r3, #4
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012de:	2303      	movs	r3, #3
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x240>
 80012ea:	2300      	movs	r3, #0
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x328>)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <HAL_GPIO_Init+0x354>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132e:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x354>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x354>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_GPIO_Init+0x354>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ac:	4a14      	ldr	r2, [pc, #80]	; (8001400 <HAL_GPIO_Init+0x354>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	f67f ae84 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40021800 	.word	0x40021800
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40022000 	.word	0x40022000
 80013fc:	40022400 	.word	0x40022400
 8001400:	40013c00 	.word	0x40013c00

08001404 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	887b      	ldrh	r3, [r7, #2]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d002      	beq.n	8001422 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e001      	b.n	8001426 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
 8001440:	4613      	mov	r3, r2
 8001442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001450:	e003      	b.n	800145a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	041a      	lsls	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4013      	ands	r3, r2
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43d9      	mvns	r1, r3
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	400b      	ands	r3, r1
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e267      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d075      	beq.n	80015a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d00c      	beq.n	80014e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4b85      	ldr	r3, [pc, #532]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d112      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014de:	d10b      	bne.n	80014f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e0:	4b7e      	ldr	r3, [pc, #504]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d05b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x108>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d157      	bne.n	80015a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e242      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001500:	d106      	bne.n	8001510 <HAL_RCC_OscConfig+0x74>
 8001502:	4b76      	ldr	r3, [pc, #472]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a75      	ldr	r2, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e01d      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b70      	ldr	r3, [pc, #448]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6f      	ldr	r2, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6c      	ldr	r2, [pc, #432]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0xb0>
 8001534:	4b69      	ldr	r3, [pc, #420]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a68      	ldr	r2, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a65      	ldr	r2, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fbd6 	bl	8000d04 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fbd2 	bl	8000d04 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e207      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xc0>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fbc2 	bl	8000d04 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fbbe 	bl	8000d04 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1f3      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0xe8>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d063      	beq.n	800167a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b2:	4b4a      	ldr	r3, [pc, #296]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ca:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1c7      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4937      	ldr	r1, [pc, #220]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e03a      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_RCC_OscConfig+0x244>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fb77 	bl	8000d04 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fb73 	bl	8000d04 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1a8      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4925      	ldr	r1, [pc, #148]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_RCC_OscConfig+0x244>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fb56 	bl	8000d04 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165c:	f7ff fb52 	bl	8000d04 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e187      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d036      	beq.n	80016f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d016      	beq.n	80016bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_RCC_OscConfig+0x248>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001694:	f7ff fb36 	bl	8000d04 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fb32 	bl	8000d04 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e167      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x240>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x200>
 80016ba:	e01b      	b.n	80016f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_OscConfig+0x248>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb1f 	bl	8000d04 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	e00e      	b.n	80016e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fb1b 	bl	8000d04 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d907      	bls.n	80016e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e150      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
 80016dc:	40023800 	.word	0x40023800
 80016e0:	42470000 	.word	0x42470000
 80016e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1ea      	bne.n	80016ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8097 	beq.w	8001830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10f      	bne.n	8001732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b7d      	ldr	r3, [pc, #500]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a7c      	ldr	r2, [pc, #496]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800171c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
 8001722:	4b7a      	ldr	r3, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172e:	2301      	movs	r3, #1
 8001730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b77      	ldr	r3, [pc, #476]	; (8001910 <HAL_RCC_OscConfig+0x474>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d118      	bne.n	8001770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173e:	4b74      	ldr	r3, [pc, #464]	; (8001910 <HAL_RCC_OscConfig+0x474>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a73      	ldr	r2, [pc, #460]	; (8001910 <HAL_RCC_OscConfig+0x474>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174a:	f7ff fadb 	bl	8000d04 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff fad7 	bl	8000d04 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e10c      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x474>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d106      	bne.n	8001786 <HAL_RCC_OscConfig+0x2ea>
 8001778:	4b64      	ldr	r3, [pc, #400]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x324>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x30c>
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001792:	4a5e      	ldr	r2, [pc, #376]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6713      	str	r3, [r2, #112]	; 0x70
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179e:	4a5b      	ldr	r2, [pc, #364]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6713      	str	r3, [r2, #112]	; 0x70
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x324>
 80017a8:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a57      	ldr	r2, [pc, #348]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	4a54      	ldr	r2, [pc, #336]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d015      	beq.n	80017f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa9c 	bl	8000d04 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fa98 	bl	8000d04 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0cb      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ee      	beq.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff fa86 	bl	8000d04 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff fa82 	bl	8000d04 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0b5      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1ee      	bne.n	80017fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a38      	ldr	r2, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80a1 	beq.w	800197c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <HAL_RCC_OscConfig+0x470>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d05c      	beq.n	8001900 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d141      	bne.n	80018d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fa56 	bl	8000d04 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185c:	f7ff fa52 	bl	8000d04 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e087      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x470>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	3b01      	subs	r3, #1
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	061b      	lsls	r3, r3, #24
 800189e:	491b      	ldr	r1, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fa2b 	bl	8000d04 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fa27 	bl	8000d04 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e05c      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x416>
 80018d0:	e054      	b.n	800197c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_RCC_OscConfig+0x478>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa14 	bl	8000d04 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff fa10 	bl	8000d04 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e045      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x470>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
 80018fe:	e03d      	b.n	800197c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e038      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000
 8001914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x4ec>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d028      	beq.n	8001978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d121      	bne.n	8001978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d11a      	bne.n	8001978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800194e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001950:	4293      	cmp	r3, r2
 8001952:	d111      	bne.n	8001978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	3b01      	subs	r3, #1
 8001962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0cc      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d90c      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ae:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e0b8      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a58      	ldr	r2, [pc, #352]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f8:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d044      	beq.n	8001aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d119      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d109      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e067      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4934      	ldr	r1, [pc, #208]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a7c:	f7ff f942 	bl	8000d04 <HAL_GetTick>
 8001a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7ff f93e 	bl	8000d04 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e04f      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d20c      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aba:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e032      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4916      	ldr	r1, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afe:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	490e      	ldr	r1, [pc, #56]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b12:	f000 f821 	bl	8001b58 <HAL_RCC_GetSysClockFreq>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1c0>)
 8001b24:	5ccb      	ldrb	r3, [r1, r3]
 8001b26:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8a2 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023c00 	.word	0x40023c00
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	0800382c 	.word	0x0800382c
 8001b50:	20000004 	.word	0x20000004
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b5c:	b090      	sub	sp, #64	; 0x40
 8001b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	2300      	movs	r3, #0
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d00d      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	f200 80a1 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x34>
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d003      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8a:	e09b      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b53      	ldr	r3, [pc, #332]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b90:	e09b      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b92:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b96:	e098      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba2:	4b4d      	ldr	r3, [pc, #308]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d028      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	099b      	lsrs	r3, r3, #6
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc4:	fb03 f201 	mul.w	r2, r3, r1
 8001bc8:	2300      	movs	r3, #0
 8001bca:	fb00 f303 	mul.w	r3, r0, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8001bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bd8:	460a      	mov	r2, r1
 8001bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bde:	4413      	add	r3, r2
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	2200      	movs	r2, #0
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	61fa      	str	r2, [r7, #28]
 8001bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bf2:	f7fe fafb 	bl	80001ec <__aeabi_uldivmod>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfe:	e053      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	617a      	str	r2, [r7, #20]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c12:	f04f 0b00 	mov.w	fp, #0
 8001c16:	4652      	mov	r2, sl
 8001c18:	465b      	mov	r3, fp
 8001c1a:	f04f 0000 	mov.w	r0, #0
 8001c1e:	f04f 0100 	mov.w	r1, #0
 8001c22:	0159      	lsls	r1, r3, #5
 8001c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8001c32:	eb63 090b 	sbc.w	r9, r3, fp
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8001c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	00eb      	lsls	r3, r5, #3
 8001c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c60:	00e2      	lsls	r2, r4, #3
 8001c62:	4614      	mov	r4, r2
 8001c64:	461d      	mov	r5, r3
 8001c66:	eb14 030a 	adds.w	r3, r4, sl
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	eb45 030b 	adc.w	r3, r5, fp
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7e:	4629      	mov	r1, r5
 8001c80:	028b      	lsls	r3, r1, #10
 8001c82:	4621      	mov	r1, r4
 8001c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c88:	4621      	mov	r1, r4
 8001c8a:	028a      	lsls	r2, r1, #10
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c92:	2200      	movs	r2, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c9c:	f7fe faa6 	bl	80001ec <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3740      	adds	r7, #64	; 0x40
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	017d7840 	.word	0x017d7840

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	0800383c 	.word	0x0800383c

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	0800383c 	.word	0x0800383c

08001d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d001      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e04e      	b.n	8001e02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d022      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d01d      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1f      	ldr	r2, [pc, #124]	; (8001e14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d018      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <HAL_TIM_Base_Start_IT+0xcc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d010      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010000 	.word	0x40010000
 8001e14:	40000400 	.word	0x40000400
 8001e18:	40000800 	.word	0x40000800
 8001e1c:	40000c00 	.word	0x40000c00
 8001e20:	40010400 	.word	0x40010400
 8001e24:	40014000 	.word	0x40014000
 8001e28:	40001800 	.word	0x40001800

08001e2c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e041      	b.n	8001ec2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fdd6 	bl	8000a04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 f9ba 	bl	80021e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d122      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11b      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0202 	mvn.w	r2, #2
 8001ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f94b 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f93d 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f94e 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d122      	bne.n	8001f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d11b      	bne.n	8001f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0204 	mvn.w	r2, #4
 8001f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f921 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8001f66:	e005      	b.n	8001f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f913 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f924 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d122      	bne.n	8001fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11b      	bne.n	8001fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0208 	mvn.w	r2, #8
 8001f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f8f7 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 8001fba:	e005      	b.n	8001fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8e9 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8fa 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d122      	bne.n	8002022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b10      	cmp	r3, #16
 8001fe8:	d11b      	bne.n	8002022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0210 	mvn.w	r2, #16
 8001ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f8cd 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
 800200e:	e005      	b.n	800201c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8bf 	bl	8002194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8d0 	bl	80021bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10e      	bne.n	800204e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f06f 0201 	mvn.w	r2, #1
 8002046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fc4b 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d10e      	bne.n	800207a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d107      	bne.n	800207a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fbdd 	bl	8002834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	d107      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800209e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f895 	bl	80021d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0220 	mvn.w	r2, #32
 80020ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fba7 	bl	8002820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e048      	b.n	800218c <HAL_TIM_OC_ConfigChannel+0xb0>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d839      	bhi.n	800217c <HAL_TIM_OC_ConfigChannel+0xa0>
 8002108:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_TIM_OC_ConfigChannel+0x34>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002145 	.word	0x08002145
 8002114:	0800217d 	.word	0x0800217d
 8002118:	0800217d 	.word	0x0800217d
 800211c:	0800217d 	.word	0x0800217d
 8002120:	08002153 	.word	0x08002153
 8002124:	0800217d 	.word	0x0800217d
 8002128:	0800217d 	.word	0x0800217d
 800212c:	0800217d 	.word	0x0800217d
 8002130:	08002161 	.word	0x08002161
 8002134:	0800217d 	.word	0x0800217d
 8002138:	0800217d 	.word	0x0800217d
 800213c:	0800217d 	.word	0x0800217d
 8002140:	0800216f 	.word	0x0800216f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f8ea 	bl	8002324 <TIM_OC1_SetConfig>
      break;
 8002150:	e017      	b.n	8002182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f953 	bl	8002404 <TIM_OC2_SetConfig>
      break;
 800215e:	e010      	b.n	8002182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 f9c2 	bl	80024f0 <TIM_OC3_SetConfig>
      break;
 800216c:	e009      	b.n	8002182 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fa2f 	bl	80025d8 <TIM_OC4_SetConfig>
      break;
 800217a:	e002      	b.n	8002182 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
      break;
 8002180:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800218a:	7dfb      	ldrb	r3, [r7, #23]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a40      	ldr	r2, [pc, #256]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002202:	d00f      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <TIM_Base_SetConfig+0x118>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00b      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3c      	ldr	r2, [pc, #240]	; (8002300 <TIM_Base_SetConfig+0x11c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <TIM_Base_SetConfig+0x120>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3a      	ldr	r2, [pc, #232]	; (8002308 <TIM_Base_SetConfig+0x124>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d027      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <TIM_Base_SetConfig+0x118>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d023      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <TIM_Base_SetConfig+0x11c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01f      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <TIM_Base_SetConfig+0x120>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a29      	ldr	r2, [pc, #164]	; (8002308 <TIM_Base_SetConfig+0x124>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d017      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a28      	ldr	r2, [pc, #160]	; (800230c <TIM_Base_SetConfig+0x128>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a27      	ldr	r2, [pc, #156]	; (8002310 <TIM_Base_SetConfig+0x12c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00f      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a26      	ldr	r2, [pc, #152]	; (8002314 <TIM_Base_SetConfig+0x130>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00b      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a25      	ldr	r2, [pc, #148]	; (8002318 <TIM_Base_SetConfig+0x134>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d007      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a24      	ldr	r2, [pc, #144]	; (800231c <TIM_Base_SetConfig+0x138>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a23      	ldr	r2, [pc, #140]	; (8002320 <TIM_Base_SetConfig+0x13c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d108      	bne.n	80022a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <TIM_Base_SetConfig+0x114>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0xf8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <TIM_Base_SetConfig+0x124>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d103      	bne.n	80022e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	615a      	str	r2, [r3, #20]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40010400 	.word	0x40010400
 800230c:	40014000 	.word	0x40014000
 8002310:	40014400 	.word	0x40014400
 8002314:	40014800 	.word	0x40014800
 8002318:	40001800 	.word	0x40001800
 800231c:	40001c00 	.word	0x40001c00
 8002320:	40002000 	.word	0x40002000

08002324 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	f023 0201 	bic.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0303 	bic.w	r3, r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f023 0302 	bic.w	r3, r3, #2
 800236c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_OC1_SetConfig+0xd8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_OC1_SetConfig+0x64>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <TIM_OC1_SetConfig+0xdc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d10c      	bne.n	80023a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f023 0308 	bic.w	r3, r3, #8
 800238e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a15      	ldr	r2, [pc, #84]	; (80023fc <TIM_OC1_SetConfig+0xd8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d003      	beq.n	80023b2 <TIM_OC1_SetConfig+0x8e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <TIM_OC1_SetConfig+0xdc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d111      	bne.n	80023d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
}
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40010000 	.word	0x40010000
 8002400:	40010400 	.word	0x40010400

08002404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0210 	bic.w	r2, r3, #16
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f023 0320 	bic.w	r3, r3, #32
 800244e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <TIM_OC2_SetConfig+0xe4>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_OC2_SetConfig+0x68>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a21      	ldr	r2, [pc, #132]	; (80024ec <TIM_OC2_SetConfig+0xe8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10d      	bne.n	8002488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002486:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <TIM_OC2_SetConfig+0xe4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_OC2_SetConfig+0x94>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a16      	ldr	r2, [pc, #88]	; (80024ec <TIM_OC2_SetConfig+0xe8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d113      	bne.n	80024c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800249e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010400 	.word	0x40010400

080024f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <TIM_OC3_SetConfig+0xe0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <TIM_OC3_SetConfig+0x66>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a20      	ldr	r2, [pc, #128]	; (80025d4 <TIM_OC3_SetConfig+0xe4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10d      	bne.n	8002572 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800255c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <TIM_OC3_SetConfig+0xe0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_OC3_SetConfig+0x92>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <TIM_OC3_SetConfig+0xe4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d113      	bne.n	80025aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	621a      	str	r2, [r3, #32]
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40010400 	.word	0x40010400

080025d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	031b      	lsls	r3, r3, #12
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <TIM_OC4_SetConfig+0xa4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_OC4_SetConfig+0x68>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a11      	ldr	r2, [pc, #68]	; (8002680 <TIM_OC4_SetConfig+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d109      	bne.n	8002654 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	621a      	str	r2, [r3, #32]
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002698:	2302      	movs	r3, #2
 800269a:	e05a      	b.n	8002752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e8:	d01d      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d018      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1a      	ldr	r2, [pc, #104]	; (800276c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00e      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d009      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d004      	beq.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a15      	ldr	r2, [pc, #84]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10c      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4313      	orrs	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40010000 	.word	0x40010000
 8002764:	40000400 	.word	0x40000400
 8002768:	40000800 	.word	0x40000800
 800276c:	40000c00 	.word	0x40000c00
 8002770:	40010400 	.word	0x40010400
 8002774:	40014000 	.word	0x40014000
 8002778:	40001800 	.word	0x40001800

0800277c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002794:	2302      	movs	r3, #2
 8002796:	e03d      	b.n	8002814 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e03f      	b.n	80028da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe f918 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fd19 	bl	80032c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	4613      	mov	r3, r2
 80028ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d130      	bne.n	800295e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <HAL_UART_Transmit_IT+0x26>
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e029      	b.n	8002960 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Transmit_IT+0x38>
 8002916:	2302      	movs	r3, #2
 8002918:	e022      	b.n	8002960 <HAL_UART_Transmit_IT+0x7e>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2221      	movs	r2, #33	; 0x21
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002958:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	4613      	mov	r3, r2
 8002978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b20      	cmp	r3, #32
 8002984:	d11d      	bne.n	80029c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_UART_Receive_IT+0x26>
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e016      	b.n	80029c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Receive_IT+0x38>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e00f      	b.n	80029c4 <HAL_UART_Receive_IT+0x58>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	461a      	mov	r2, r3
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 faab 	bl	8002f14 <UART_Start_Receive_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2302      	movs	r3, #2
  }
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0ba      	sub	sp, #232	; 0xe8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_UART_IRQHandler+0x66>
 8002a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb8f 	bl	800314e <UART_Receive_IT>
      return;
 8002a30:	e256      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80de 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x22c>
 8002a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80d1 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_UART_IRQHandler+0xae>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0201 	orr.w	r2, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_UART_IRQHandler+0xd2>
 8002a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xf6>
 8002aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <HAL_UART_IRQHandler+0x126>
 8002ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0208 	orr.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 81ed 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_UART_IRQHandler+0x14e>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fb1a 	bl	800314e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_UART_IRQHandler+0x17a>
 8002b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04f      	beq.n	8002be6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa22 	bl	8002f90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d141      	bne.n	8002bde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3314      	adds	r3, #20
 8002b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b96:	e841 2300 	strex	r3, r2, [r1]
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1d9      	bne.n	8002b5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	4a7d      	ldr	r2, [pc, #500]	; (8002da8 <HAL_UART_IRQHandler+0x3dc>)
 8002bb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fa53 	bl	8001066 <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00e      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f986 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e00a      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f982 	bl	8002ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e006      	b.n	8002bf4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f97e 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bf2:	e170      	b.n	8002ed6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	bf00      	nop
    return;
 8002bf6:	e16e      	b.n	8002ed6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 814a 	bne.w	8002e96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8143 	beq.w	8002e96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 813c 	beq.w	8002e96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	f040 80b4 	bne.w	8002dac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8140 	beq.w	8002eda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c62:	429a      	cmp	r2, r3
 8002c64:	f080 8139 	bcs.w	8002eda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7a:	f000 8088 	beq.w	8002d8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	330c      	adds	r3, #12
 8002c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1d9      	bne.n	8002c7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3314      	adds	r3, #20
 8002cd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e1      	bne.n	8002cca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d32:	e841 2300 	strex	r3, r2, [r1]
 8002d36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1e3      	bne.n	8002d06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	f023 0310 	bic.w	r3, r3, #16
 8002d62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	330c      	adds	r3, #12
 8002d6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d70:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e3      	bne.n	8002d4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe f8fc 	bl	8000f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8ac 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da4:	e099      	b.n	8002eda <HAL_UART_IRQHandler+0x50e>
 8002da6:	bf00      	nop
 8002da8:	08003057 	.word	0x08003057
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 808b 	beq.w	8002ede <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8086 	beq.w	8002ede <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002df6:	647a      	str	r2, [r7, #68]	; 0x44
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e3      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3314      	adds	r3, #20
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	623b      	str	r3, [r7, #32]
   return(result);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e2e:	633a      	str	r2, [r7, #48]	; 0x30
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e3      	bne.n	8002e0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	330c      	adds	r3, #12
 8002e70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e74:	61fa      	str	r2, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69b9      	ldr	r1, [r7, #24]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	617b      	str	r3, [r7, #20]
   return(result);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e3      	bne.n	8002e50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f834 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e94:	e023      	b.n	8002ede <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x4ea>
 8002ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8e5 	bl	800307e <UART_Transmit_IT>
    return;
 8002eb4:	e014      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x514>
 8002ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f925 	bl	800311e <UART_EndTransmit_IT>
    return;
 8002ed4:	e004      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
    return;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_UART_IRQHandler+0x514>
      return;
 8002ede:	bf00      	nop
  }
}
 8002ee0:	37e8      	adds	r7, #232	; 0xe8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop

08002ee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2222      	movs	r2, #34	; 0x22
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f60:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0220 	orr.w	r2, r2, #32
 8002f80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b095      	sub	sp, #84	; 0x54
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	e853 3f00 	ldrex	r3, [r3]
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fb8:	643a      	str	r2, [r7, #64]	; 0x40
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc0:	e841 2300 	strex	r3, r2, [r1]
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e5      	bne.n	8002f98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3314      	adds	r3, #20
 8002fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	2b01      	cmp	r3, #1
 8003006:	d119      	bne.n	800303c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	60bb      	str	r3, [r7, #8]
   return(result);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 0310 	bic.w	r3, r3, #16
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003028:	61ba      	str	r2, [r7, #24]
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6979      	ldr	r1, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
}
 800304a:	bf00      	nop
 800304c:	3754      	adds	r7, #84	; 0x54
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff ff39 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800307e:	b480      	push	{r7}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b21      	cmp	r3, #33	; 0x21
 8003090:	d13e      	bne.n	8003110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d114      	bne.n	80030c6 <UART_Transmit_IT+0x48>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d110      	bne.n	80030c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	1c9a      	adds	r2, r3, #2
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	621a      	str	r2, [r3, #32]
 80030c4:	e008      	b.n	80030d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6211      	str	r1, [r2, #32]
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4619      	mov	r1, r3
 80030e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10f      	bne.n	800310c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800310a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003134:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fbba 	bl	80008b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b08c      	sub	sp, #48	; 0x30
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b22      	cmp	r3, #34	; 0x22
 8003160:	f040 80ab 	bne.w	80032ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d117      	bne.n	800319e <UART_Receive_IT+0x50>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d113      	bne.n	800319e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	b29a      	uxth	r2, r3
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	1c9a      	adds	r2, r3, #2
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
 800319c:	e026      	b.n	80031ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b0:	d007      	beq.n	80031c2 <UART_Receive_IT+0x74>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <UART_Receive_IT+0x82>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e008      	b.n	80031e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4619      	mov	r1, r3
 80031fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d15a      	bne.n	80032b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0220 	bic.w	r2, r2, #32
 800320e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800321e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0201 	bic.w	r2, r2, #1
 800322e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	d135      	bne.n	80032ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	613b      	str	r3, [r7, #16]
   return(result);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f023 0310 	bic.w	r3, r3, #16
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	623a      	str	r2, [r7, #32]
 8003268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69f9      	ldr	r1, [r7, #28]
 800326c:	6a3a      	ldr	r2, [r7, #32]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	61bb      	str	r3, [r7, #24]
   return(result);
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d10a      	bne.n	800329e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff fe29 	bl	8002efc <HAL_UARTEx_RxEventCallback>
 80032aa:	e002      	b.n	80032b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fd faed 	bl	800088c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e002      	b.n	80032bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032ba:	2302      	movs	r3, #2
  }
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3730      	adds	r7, #48	; 0x30
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b0c0      	sub	sp, #256	; 0x100
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	ea40 0301 	orr.w	r3, r0, r1
 80032ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	431a      	orrs	r2, r3
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800331c:	f021 010c 	bic.w	r1, r1, #12
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	6999      	ldr	r1, [r3, #24]
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	ea40 0301 	orr.w	r3, r0, r1
 800334a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	4b8f      	ldr	r3, [pc, #572]	; (8003590 <UART_SetConfig+0x2cc>)
 8003354:	429a      	cmp	r2, r3
 8003356:	d005      	beq.n	8003364 <UART_SetConfig+0xa0>
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <UART_SetConfig+0x2d0>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d104      	bne.n	800336e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7fe fcde 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8003368:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800336c:	e003      	b.n	8003376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800336e:	f7fe fcc5 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8003372:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	f040 810c 	bne.w	800359c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003388:	2200      	movs	r2, #0
 800338a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800338e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	1891      	adds	r1, r2, r2
 800339c:	65b9      	str	r1, [r7, #88]	; 0x58
 800339e:	415b      	adcs	r3, r3
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033a6:	4621      	mov	r1, r4
 80033a8:	eb12 0801 	adds.w	r8, r2, r1
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb43 0901 	adc.w	r9, r3, r1
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	eb18 0303 	adds.w	r3, r8, r3
 80033d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033d4:	462b      	mov	r3, r5
 80033d6:	eb49 0303 	adc.w	r3, r9, r3
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033f2:	460b      	mov	r3, r1
 80033f4:	18db      	adds	r3, r3, r3
 80033f6:	653b      	str	r3, [r7, #80]	; 0x50
 80033f8:	4613      	mov	r3, r2
 80033fa:	eb42 0303 	adc.w	r3, r2, r3
 80033fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003408:	f7fc fef0 	bl	80001ec <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4b61      	ldr	r3, [pc, #388]	; (8003598 <UART_SetConfig+0x2d4>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	011c      	lsls	r4, r3, #4
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003424:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800342c:	4642      	mov	r2, r8
 800342e:	464b      	mov	r3, r9
 8003430:	1891      	adds	r1, r2, r2
 8003432:	64b9      	str	r1, [r7, #72]	; 0x48
 8003434:	415b      	adcs	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800343c:	4641      	mov	r1, r8
 800343e:	eb12 0a01 	adds.w	sl, r2, r1
 8003442:	4649      	mov	r1, r9
 8003444:	eb43 0b01 	adc.w	fp, r3, r1
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345c:	4692      	mov	sl, r2
 800345e:	469b      	mov	fp, r3
 8003460:	4643      	mov	r3, r8
 8003462:	eb1a 0303 	adds.w	r3, sl, r3
 8003466:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800346a:	464b      	mov	r3, r9
 800346c:	eb4b 0303 	adc.w	r3, fp, r3
 8003470:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003480:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003488:	460b      	mov	r3, r1
 800348a:	18db      	adds	r3, r3, r3
 800348c:	643b      	str	r3, [r7, #64]	; 0x40
 800348e:	4613      	mov	r3, r2
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
 8003496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800349a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800349e:	f7fc fea5 	bl	80001ec <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <UART_SetConfig+0x2d4>)
 80034aa:	fba3 2301 	umull	r2, r3, r3, r1
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2264      	movs	r2, #100	; 0x64
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1acb      	subs	r3, r1, r3
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034be:	4b36      	ldr	r3, [pc, #216]	; (8003598 <UART_SetConfig+0x2d4>)
 80034c0:	fba3 2302 	umull	r2, r3, r3, r2
 80034c4:	095b      	lsrs	r3, r3, #5
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034cc:	441c      	add	r4, r3
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80034e8:	415b      	adcs	r3, r3
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6339      	str	r1, [r7, #48]	; 0x30
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800353c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003544:	460b      	mov	r3, r1
 8003546:	18db      	adds	r3, r3, r3
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	4613      	mov	r3, r2
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800355a:	f7fc fe47 	bl	80001ec <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <UART_SetConfig+0x2d4>)
 8003564:	fba3 1302 	umull	r1, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	2164      	movs	r1, #100	; 0x64
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	3332      	adds	r3, #50	; 0x32
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <UART_SetConfig+0x2d4>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	f003 0207 	and.w	r2, r3, #7
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4422      	add	r2, r4
 800358a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800358c:	e105      	b.n	800379a <UART_SetConfig+0x4d6>
 800358e:	bf00      	nop
 8003590:	40011000 	.word	0x40011000
 8003594:	40011400 	.word	0x40011400
 8003598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800359c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ae:	4642      	mov	r2, r8
 80035b0:	464b      	mov	r3, r9
 80035b2:	1891      	adds	r1, r2, r2
 80035b4:	6239      	str	r1, [r7, #32]
 80035b6:	415b      	adcs	r3, r3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035be:	4641      	mov	r1, r8
 80035c0:	1854      	adds	r4, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb43 0501 	adc.w	r5, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	00eb      	lsls	r3, r5, #3
 80035d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d6:	00e2      	lsls	r2, r4, #3
 80035d8:	4614      	mov	r4, r2
 80035da:	461d      	mov	r5, r3
 80035dc:	4643      	mov	r3, r8
 80035de:	18e3      	adds	r3, r4, r3
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035e4:	464b      	mov	r3, r9
 80035e6:	eb45 0303 	adc.w	r3, r5, r3
 80035ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800360a:	4629      	mov	r1, r5
 800360c:	008b      	lsls	r3, r1, #2
 800360e:	4621      	mov	r1, r4
 8003610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003614:	4621      	mov	r1, r4
 8003616:	008a      	lsls	r2, r1, #2
 8003618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800361c:	f7fc fde6 	bl	80001ec <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4b60      	ldr	r3, [pc, #384]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	011c      	lsls	r4, r3, #4
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003638:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800363c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	61b9      	str	r1, [r7, #24]
 8003648:	415b      	adcs	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6139      	str	r1, [r7, #16]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4651      	mov	r1, sl
 800366e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	67bb      	str	r3, [r7, #120]	; 0x78
 800369a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036a8:	4649      	mov	r1, r9
 80036aa:	008b      	lsls	r3, r1, #2
 80036ac:	4641      	mov	r1, r8
 80036ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b2:	4641      	mov	r1, r8
 80036b4:	008a      	lsls	r2, r1, #2
 80036b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036ba:	f7fc fd97 	bl	80001ec <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <UART_SetConfig+0x4e4>)
 80036c4:	fba3 1302 	umull	r1, r3, r3, r2
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	3332      	adds	r3, #50	; 0x32
 80036d6:	4a34      	ldr	r2, [pc, #208]	; (80037a8 <UART_SetConfig+0x4e4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e2:	441c      	add	r4, r3
 80036e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e8:	2200      	movs	r2, #0
 80036ea:	673b      	str	r3, [r7, #112]	; 0x70
 80036ec:	677a      	str	r2, [r7, #116]	; 0x74
 80036ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036f2:	4642      	mov	r2, r8
 80036f4:	464b      	mov	r3, r9
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	415b      	adcs	r3, r3
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003702:	4641      	mov	r1, r8
 8003704:	1851      	adds	r1, r2, r1
 8003706:	6039      	str	r1, [r7, #0]
 8003708:	4649      	mov	r1, r9
 800370a:	414b      	adcs	r3, r1
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371a:	4659      	mov	r1, fp
 800371c:	00cb      	lsls	r3, r1, #3
 800371e:	4651      	mov	r1, sl
 8003720:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003724:	4651      	mov	r1, sl
 8003726:	00ca      	lsls	r2, r1, #3
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	4603      	mov	r3, r0
 800372e:	4642      	mov	r2, r8
 8003730:	189b      	adds	r3, r3, r2
 8003732:	66bb      	str	r3, [r7, #104]	; 0x68
 8003734:	464b      	mov	r3, r9
 8003736:	460a      	mov	r2, r1
 8003738:	eb42 0303 	adc.w	r3, r2, r3
 800373c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	663b      	str	r3, [r7, #96]	; 0x60
 8003748:	667a      	str	r2, [r7, #100]	; 0x64
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003756:	4649      	mov	r1, r9
 8003758:	008b      	lsls	r3, r1, #2
 800375a:	4641      	mov	r1, r8
 800375c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003760:	4641      	mov	r1, r8
 8003762:	008a      	lsls	r2, r1, #2
 8003764:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003768:	f7fc fd40 	bl	80001ec <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003772:	fba3 1302 	umull	r1, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2164      	movs	r1, #100	; 0x64
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <UART_SetConfig+0x4e4>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 020f 	and.w	r2, r3, #15
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4422      	add	r2, r4
 8003798:	609a      	str	r2, [r3, #8]
}
 800379a:	bf00      	nop
 800379c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037a0:	46bd      	mov	sp, r7
 80037a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a6:	bf00      	nop
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4d0d      	ldr	r5, [pc, #52]	; (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2600      	movs	r6, #0
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4d0b      	ldr	r5, [pc, #44]	; (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	; (80037f0 <__libc_init_array+0x44>)
 80037c0:	f000 f820 	bl	8003804 <_init>
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2600      	movs	r6, #0
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	0800384c 	.word	0x0800384c
 80037e8:	0800384c 	.word	0x0800384c
 80037ec:	0800384c 	.word	0x0800384c
 80037f0:	08003850 	.word	0x08003850

080037f4 <memset>:
 80037f4:	4402      	add	r2, r0
 80037f6:	4603      	mov	r3, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <_init>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr

08003810 <_fini>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr
